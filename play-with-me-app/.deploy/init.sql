CREATE TABLE IF NOT EXISTS USERS
(
    ID       UUID PRIMARY KEY,
    USERNAME VARCHAR(15)  NOT NULL UNIQUE,
    PASSWORD VARCHAR(255) NOT NULL,
    CHECK ((USERNAME != '') AND (PASSWORD != ''))
);

CREATE TABLE IF NOT EXISTS PROFILE
(
    ID            UUID PRIMARY KEY,
    USER_ID       UUID REFERENCES USERS (ID) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL UNIQUE,
    NAME          VARCHAR(16)                                                    NOT NULL,
    GENDER        VARCHAR(20)                                                    NOT NULL,
    DATE_OF_BIRTH DATE                                                           NOT NULL
        CHECK ((NAME != '') AND (DATE_OF_BIRTH < CURRENT_DATE))
);

CREATE TABLE IF NOT EXISTS GAME
(
    ID   UUID PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS GENRE
(
    ID   UUID PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL UNIQUE,
    CHECK (NAME != '')
);

CREATE TABLE IF NOT EXISTS GENRE_GAME
(
    GAME_ID  UUID REFERENCES GAME (ID) ON DELETE CASCADE ON UPDATE CASCADE  NOT NULL,
    GENRE_ID UUID REFERENCES GENRE (ID) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
    PRIMARY KEY (GAME_ID, GENRE_ID)
);

CREATE TABLE IF NOT EXISTS SEARCH_REQUEST
(
    ID           UUID PRIMARY KEY,
    TITLE        VARCHAR(100)                 NOT NULL,
    AUTHOR       UUID REFERENCES PROFILE (ID) NOT NULL,
    GAME_ID      UUID REFERENCES GAME (ID)    NOT NULL,
    CONTENT      TEXT                         NOT NULL,
    STATUS       BOOLEAN                      NOT NULL,
    DATE_CREATED TIMESTAMP                    NOT NULL,
    CHECK ((TITLE != ''))
);

CREATE TABLE IF NOT EXISTS FOLLOWER
(
    PROFILE_ID        UUID REFERENCES PROFILE (ID) ON DELETE CASCADE ON UPDATE CASCADE        NOT NULL,
    SEARCH_REQUEST_ID UUID REFERENCES SEARCH_REQUEST (ID) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
    PRIMARY KEY (PROFILE_ID, SEARCH_REQUEST_ID)
);

CREATE TABLE IF NOT EXISTS CHAT
(
    ID           UUID PRIMARY KEY,
    NAME         VARCHAR(50)                                                      NOT NULL,
    ADMIN        UUID REFERENCES PROFILE (ID) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
    DATE_CREATED TIMESTAMP                                                        NOT NULL,
    SEARCH_REQUEST_ID UUID REFERENCES SEARCH_REQUEST (ID) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
        CHECK ((NAME != ''))
);

CREATE TABLE IF NOT EXISTS MEMBER
(
    CHAT_ID    UUID REFERENCES CHAT (ID) ON DELETE CASCADE ON UPDATE CASCADE    NOT NULL,
    PROFILE_ID UUID REFERENCES PROFILE (ID) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
    PRIMARY KEY (CHAT_ID, PROFILE_ID)
);

CREATE TABLE IF NOT EXISTS MESSAGE
(
    ID           UUID PRIMARY KEY,
    CHAT_ID      UUID REFERENCES CHAT (ID) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
    PROFILE_ID   UUID REFERENCES PROFILE (ID)                                  NOT NULL,
    CONTENT      TEXT                                                          NOT NULL,
    DATE_CREATED TIMESTAMP                                                     NOT NULL
);

